import * as React from "react";
import { bindActionCreators } from 'redux'
<% if(route) { %>import { withRouter } from "react-router-dom";<% } %>
<% if(redux) { %>import { connect } from "react-redux";<% } %>
<% if(action) { %>import { <%= action.upperCamel %>Action } from "./actions/<%= action.dashed %>.action";<% } %>

import <%= component.upperCamel %>Presentation from "./components/<%= component.dashed %>";

class <%= component.upperCamel %> extends React.Component<any, any>{
    constructor(props: any) {
        super(props);
    }

    componentDidMount() {
    }
    
    render() {
        return <<%= component.upperCamel %>Presentation />;
    }
}<% if(redux) { %><% if(reducer) { %>
const mapStateToProps = (state) => {
    return {
        <%= reducer.camel %>: state.<%= component.upperCamel %><%= reducer.upperCamel %>Reducer
    }
}<% } %>
<% if(action && reducer) { %>
const mapDispatchToProps = (dispatch) => {
    return {
        <%= action.upperCamel %>Action: bindActionCreators(<%= action.upperCamel %>Action, dispatch)
    }
}<% } %><% } %>

<% if(!route) { %> export default <% } %><% if(route) {%>const <%= component.upperCamel %>Component: React.ComponentType<any> = <% } %><% if(redux) { %>connect(<% } %><% if(action && reducer) { %>mapStateToProps, mapDispatchToProps<% } %><% if(redux) { %>)(<% } %><%= component.upperCamel %><% if(redux) { %>)<% } %>;
    
<% if(route) { %>export default withRouter(<%= component.upperCamel %>Component);<% } %>